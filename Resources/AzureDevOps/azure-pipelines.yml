variables:
  SolutionBaseName: 'DFC.Swagger.Standard'
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'release'
  NuGet.UseLegacyFindFiles: true

trigger:
- master

resources:
  repositories:
  - repository: self
  - repository: dfc-devops
    type: github
    name: SkillsFundingAgency/dfc-devops
    ref: refs/tags/v1.16.1
    endpoint: 'GitHub (ESFA)'

pool:
  name: NCS - CI and CD
  demands:
  - msbuild
  - visualstudio

stages:
- stage: Build
  displayName: Build, Test and Analyze
  jobs:
  - job: BuildTestAndAnalyze
    steps:
    - template: AzureDevOpsTemplates\Build\StepTemplates\dfc-dotnetcore-build.yml@dfc-devops
      parameters:
        SolutionBaseName: $(SolutionBaseName)
        BuildPlatform: 'any cpu'
        DotNetCoreVersion: 8.x
        GitVersionVersion: 5.12.x
        BuildConfiguration: 'release'
        TestSuffix: Tests

    - script: |
        setlocal enabledelayedexpansion
        set "branchName=$(Build.SourceBranch)"
        echo Branch name: !branchName!
        :: Remove the 'refs/heads/' prefix
        set "branchName=!branchName:refs/heads/=!"
        :: Remove the 'release/' prefix
        set "VERSION=!branchName:release/=!"
        :: Check if the VERSION is set correctly
        if "!VERSION!" == "!branchName!" (
        echo ##vso[task.logissue type=error]Branch name does not match the expected pattern 'release/x.x.x'
        exit /b 1
        )
        echo Extracted version: !VERSION!
        echo ##vso[task.setvariable variable=PackageVersion]!VERSION!

      displayName: 'Extract version from branch name'

    - task: NuGetCommand@2
      displayName: 'NuGet pack'
      inputs:
        command: 'pack'
        packagesToPack: '$(Build.SourcesDirectory)/$(SolutionBaseName)/$(SolutionBaseName).csproj'
        packDestination: '$(Build.ArtifactStagingDirectory)'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'PackageVersion'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'
        publishLocation: 'Container'

    - script: dir $(Build.ArtifactStagingDirectory)
      displayName: 'List contents after NuGet pack'

    - script: copy E:\Build\_work\55\a\DFC.Swagger.Standard.*.nupkg $(Build.ArtifactStagingDirectory)
      displayName: 'Copy package to Artifact Staging Directory'

    - script: dir $(Build.ArtifactStagingDirectory)
      displayName: 'List contents after copying package'

- stage: PublishPackage
  displayName: Publish Package to NuGet
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
  jobs:
  - job: CleanArtifacts
    displayName: Clean artifacts directory
    workspace:
      clean: all

  - deployment: PublishNugetPackage
    dependsOn: CleanArtifacts
    environment: LiveService_NUGET
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - script: |
              git config --global user.email "careersdevops@education.gov.uk"
              git config --global user.name "Automated tag from build"
              git tag -a v$(Build.BuildNumber) -m "Automated tag of $(Build.BuildNumber) from build server"
              git push --tags
            displayName: Tag release

          - script: dir $(Build.ArtifactStagingDirectory)
            displayName: 'List contents of Artifact Staging Directory'

          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
              nuGetFeedType: internal
              publishVstsFeed: NationalCareersService