stages:
- stage: Build
  displayName: Build, Test and Analyze
  jobs:
  - job: BuildTestAndAnalyze
    steps:
    - template: AzureDevOpsTemplates\Build\StepTemplates\dfc-dotnetcore-build.yml@dfc-devops
      parameters:
        SolutionBaseName: $(SolutionBaseName)
        BuildPlatform: 'any cpu'
        DotNetCoreVersion: 8.x
        GitVersionVersion: 5.12.x
        BuildConfiguration: 'release'
        TestSuffix: Tests

    - script: |
        echo "##[group]Extracting version from branch name"
        if [[ "$(Build.SourceBranch)" =~ ^refs/heads/release/([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          VERSION=${BASH_REMATCH[1]}
          echo "##vso[task.setvariable variable=PackageVersion]$VERSION"
          echo "Extracted version: $VERSION"
        else
          echo "##vso[task.logissue type=error]Branch name does not match the expected pattern 'release/x.x.x'"
          exit 1
        fi
        echo "##[endgroup]"
      displayName: 'Extract version from branch name'

    - template: AzureDevOpsTemplates\Build\StepTemplates\dfc-dotnetcore-nuget-pack.yml@dfc-devops
      parameters:
        SolutionBaseName: $(SolutionBaseName)
        Version: $(PackageVersion)

- stage: PublishPackage
  displayName: Publish Package to NuGet
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: CleanArtifacts
    displayName: Clean artifacts directory
    workspace:
      clean: all

  - deployment: PublishNugetPackage
    dependsOn: CleanArtifacts
    environment: LiveService_NUGET
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - script: |
              git config --global user.email "careersdevops@education.gov.uk"
              git config --global user.name "Automated tag from build"
              git tag -a v$(Build.BuildNumber) -m "Automated tag of $(Build.BuildNumber) from build server"
              git push --tags
            displayName: Tag release

          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)\$(SolutionBaseName).Nuget\*.nupkg;!$(Pipeline.Workspace)\$(SolutionBaseName).Nuget\*.symbols.nupkg'
              nuGetFeedType: internal
              publishVstsFeed: NationalCareersService